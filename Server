import socket
import selectors
import numpy as np
import pandas
import scipy
from scipy import stats
import json
import threading

HOST = "127.0.0.1"
PORT = 5006


df = pandas.read_csv('/Users/benjamin/Desktop/Metadatabase.csv', encoding='latin')
df.drop(['adult','popularity'], axis=1)

for g in df:
    if g[0] == 0 or g[3] == 0:
        df.drop([g])


def main():
    server = socket.socket()
    server.bind((HOST, PORT))
    server.setblocking(False)
    server.listen(100)
    sel = selectors.DefaultSelector()

    sel.register(server, selectors.EVENT_READ, accept)

    while True:
        for key, mask in sel.select():
            handler = key.data
            handler(key.fileobj, sel)


def accept(server, sel):
    c, addr = server.accept()
    print("Accepted Connection from:{}".format(c))
    c.setblocking(False)
    sel.register(c, selectors.EVENT_READ, requests)



def requests(server, sel):
    try:
        data = server.recv(1024)
        if data:
            data = data.decode()
            if data == "1":
                corr(server)
            elif data == "2":
                genre(server)
            elif data == "close":
                close_connection(server, sel)
            else:
                return "Invalid Command"
    except IOError as err:
        print("There is an error of{}".format(err))
    except OSError as err1:
        print("There is an error of{}".format(err1))



def corr(server):
    null = input("Please input your null hypotheses:")
    alt = input("Please input your alternative hypotheses:")


def genre(server):
    genre = server.recv(1024)
    genre.decode()
    budget = []
    revenue = []


    for i, row in df.iterrows():
        jsonstring = row[2].replace("'", "\"")
        genre_cat = json.loads(jsonstring)
        movies = []
        for x in genre_cat:
            movies.append(x['name'])
        if genre in movies:
            budget.append(row[1])
            revenue.append(row[5])
        else:
            print("There are no movies in this category!")
    r, pvalue = scipy.stats.pearsonr(budget, revenue)

    server.send(str(r).encode())



def close_connection(server, sel):
    print("Closing Connection")
    sel.unregister()
    server.close()


if __name__ == '__main__':
    main()
